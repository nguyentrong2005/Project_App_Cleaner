from core.system_info import get_system_info as get_real_system_info
from core.scanner import TrashScanner
from core.cleaner import TrashCleaner
from pathlib import Path
from core.cleaner import TrashCleaner


def get_system_info():
    """
    H√†m trung gian g·ªçi th√¥ng tin h·ªá th·ªëng t·ª´ core.
    Tr·∫£ v·ªÅ chu·ªói m√¥ t·∫£ h·ªá th·ªëng th·∫≠t.
    """
    return get_real_system_info()


def scan_and_return_summary():
    """
    Th·ª±c hi·ªán qu√©t r√°c th·∫≠t v√† tr·∫£ v·ªÅ:
    - summary: dict lo·∫°i_r√°c ‚Üí (s·ªë l∆∞·ª£ng, dung l∆∞·ª£ng)
    - chi_tiet: dict lo·∫°i_r√°c ‚Üí danh s√°ch file path
    - t·ªïng dung l∆∞·ª£ng
    - th·ªùi gian qu√©t
    """
    scanner = TrashScanner()
    scanner.scan_garbage()
    summary = scanner.get_classified_summary()
    scanner.export_scan_result()

    return summary, scanner.classified_paths, scanner.total_size, scanner.scan_duration


def get_scan_history():
    history_path = Path("docs/history.txt")
    history = []
    if history_path.exists():
        with open(history_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line:
                    parts = line.split("|")
                    if len(parts) == 3:
                        time_str = parts[0].strip()
                        items = parts[1].strip()
                        size = parts[2].strip()
                        history.append((time_str, items, size))
    return history


def delete_selected_files(file_paths):
    """
    G·ªçi TrashCleaner ƒë·ªÉ x√≥a c√°c file ƒë√£ ch·ªçn.

    Args:
        file_paths (List[str]): Danh s√°ch ƒë∆∞·ªùng d·∫´n file (d∆∞·ªõi d·∫°ng chu·ªói)

    Returns:
        Tuple[List[str], List[Tuple[str, str]]]: (file x√≥a th√†nh c√¥ng, file l·ªói + l√Ω do)
    """
    paths = [Path(p) for p in file_paths]
    cleaner = TrashCleaner(paths)
    cleaner.clean()
    deleted, failed = cleaner.get_result()

    # Tr·∫£ l·∫°i ·ªü d·∫°ng str cho d·ªÖ x·ª≠ l√Ω tr√™n giao di·ªán
    return [str(p) for p in deleted], [(str(p), reason) for p, reason in failed]

def get_clean_history():
    """
    ƒê·ªçc l·ªãch s·ª≠ d·ªçn r√°c t·ª´ file docs/cleaner/history_cleaner.txt.
    Tr·∫£ v·ªÅ danh s√°ch d√≤ng th·ªùi gian x√≥a: th·ªùi gian, t·ªïng s·ªë file, t·ªïng dung l∆∞·ª£ng, c√°c lo·∫°i r√°c.
    """
    history_path = Path("docs/cleaner/history_cleaner.txt")
    if not history_path.exists():
        return []

    history = []
    current_time = ""
    summary = []

    with open(history_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line.startswith("üßπ D·ªçn r√°c l√∫c"):
                # N·∫øu c√≥ d√≤ng tr∆∞·ªõc ƒë√≥, l∆∞u l·∫°i tr∆∞·ªõc
                if current_time:
                    history.append((current_time, summary))
                    summary = []

                parts = line.split("‚Äî T·ªïng:")
                current_time = parts[0].replace("üßπ D·ªçn r√°c l√∫c", "").strip()
                summary.append(parts[1].strip() if len(parts) > 1 else "")
            elif line.startswith("-") or line.startswith("  -"):
                summary.append(line.strip())

        # L∆∞u d√≤ng cu·ªëi
        if current_time:
            history.append((current_time, summary))

    return history

