import os
import tempfile
from pathlib import Path
from typing import List, Tuple

from core.rules import is_garbage_file, is_empty_directory, is_writable
from utils import is_file_locked, check_permissions


class TrashScanner:
    """
    L·ªõp TrashScanner d√πng ƒë·ªÉ qu√©t file/th∆∞ m·ª•c r√°c an to√†n trong h·ªá th·ªëng.
    Ch·ªâ ki·ªÉm tra trong c√°c th∆∞ m·ª•c TEMP c·ªßa ng∆∞·ªùi d√πng v√† Windows.
    """

    def __init__(self):
        self.trash_paths: List[Path] = []
        self.total_size: int = 0
        # L∆∞u c√°c file kh√¥ng ƒë·ªß quy·ªÅn
        self.rejected_paths: List[Tuple[Path, dict]] = []

    def scan_garbage(self) -> Tuple[List[Path], int]:
        """
        Qu√©t c√°c th∆∞ m·ª•c an to√†n ƒë·ªÉ t√¨m r√°c.
        Tr·∫£ v·ªÅ: (danh s√°ch path r√°c, t·ªïng dung l∆∞·ª£ng r√°c)
        """
        safe_paths = [
            Path(tempfile.gettempdir()),       # %TEMP% c·ªßa user
            Path('C:/Windows/Temp')            # TEMP h·ªá th·ªëng
        ]

        for path in safe_paths:
            self._scan_directory(path)

        return self.trash_paths, self.total_size

    def _scan_directory(self, folder: Path) -> None:
        """Duy·ªát ƒë·ªá quy th∆∞ m·ª•c ƒë·ªÉ ki·ªÉm tra file/th∆∞ m·ª•c r√°c"""
        if not folder.exists():
            return

        for root, dirs, files in os.walk(folder):
            for file in files:
                file_path = Path(root) / file
                if is_garbage_file(file_path):
                    perms = check_permissions(file_path)
                    if perms["delete"] and not is_file_locked(file_path):
                        self.trash_paths.append(file_path)
                        self.total_size += file_path.stat().st_size
                    else:
                        self.rejected_paths.append((file_path, perms))

            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                if is_empty_directory(dir_path):
                    perms = check_permissions(dir_path)
                    if perms["delete"]:
                        self.trash_paths.append(dir_path)
                    else:
                        self.rejected_paths.append((dir_path, perms))


def scan_and_log() -> None:
    os.makedirs("docs", exist_ok=True)
    log_path = Path("docs/scan_log.txt")
    if log_path.exists():
        log_path.unlink()

    scanner = TrashScanner()
    paths, size = scanner.scan_garbage()

    print(f"ƒê√£ t√¨m th·∫•y {len(paths)} file/th∆∞ m·ª•c r√°c.")
    print(f"T·ªïng dung l∆∞·ª£ng: {size / 1024:.2f} KB")

    os.makedirs("docs", exist_ok=True)
    with open("docs/scan_log.txt", "w", encoding="utf-8") as f:
        f.write(f"ƒê√£ t√¨m th·∫•y {len(paths)} file/th∆∞ m·ª•c r√°c.\n")
        f.write(f"T·ªïng dung l∆∞·ª£ng: {size / 1024:.2f} KB\n\n")
        f.write("Danh s√°ch file/th∆∞ m·ª•c c√≥ th·ªÉ x√≥a:\n")
        for p in paths:
            size_kb = p.stat().st_size / 1024 if p.is_file() else 0
            f.write(f"- {p} ({size_kb:.2f} KB)\n")

        if scanner.rejected_paths:
            f.write("\n‚ö†Ô∏è C√°c file/th∆∞ m·ª•c KH√îNG ƒë∆∞·ª£c th√™m do thi·∫øu quy·ªÅn:\n")
            for p, perms in scanner.rejected_paths:
                f.write(f"- {p} ‚Üí Quy·ªÅn: {perms}\n")

    print("üìÑ ƒê√£ l∆∞u danh s√°ch v√†o: docs/scan_log.txt")
