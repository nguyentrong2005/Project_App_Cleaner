import os
from pathlib import Path
from typing import List, Tuple
from collections import defaultdict
from time import time
from datetime import datetime

from core.rules import (
    GARBAGE_EXTENSIONS,
    get_scan_directories,
    is_empty_directory,
    can_delete,
    check_permissions,
    get_grouping_root
)
from utils import is_file_locked


class TrashScanner:
    """
    L·ªõp th·ª±c hi·ªán qu√©t file v√† th∆∞ m·ª•c r√°c trong h·ªá th·ªëng.

    Ch·ª©c nƒÉng:
    - Qu√©t ƒë·ªá quy c√°c th∆∞ m·ª•c ƒë∆∞·ª£c c·∫•u h√¨nh trong rules.py
    - Ph√¢n lo·∫°i file/th∆∞ m·ª•c n√†o l√† r√°c d·ª±a tr√™n ƒëu√¥i m·ªü r·ªông v√† k√≠ch th∆∞·ªõc
    - Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† tr·∫°ng th√°i kh√≥a file
    - L∆∞u k·∫øt qu·∫£ v√†o danh s√°ch trash_paths v√† rejected_paths
    """

    def __init__(self):
        """
        Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng TrashScanner v·ªõi c√°c thu·ªôc t√≠nh l∆∞u k·∫øt qu·∫£:
        - trash_paths: Danh s√°ch file/th∆∞ m·ª•c r√°c c√≥ th·ªÉ x√≥a
        - total_size: T·ªïng dung l∆∞·ª£ng r√°c ƒë√£ qu√©t ƒë∆∞·ª£c (ƒë∆°n v·ªã byte)
        - rejected_paths: Danh s√°ch c√°c path kh√¥ng th·ªÉ x·ª≠ l√Ω do thi·∫øu quy·ªÅn ho·∫∑c b·ªã kh√≥a
        """
        self.trash_paths: List[Path] = []
        self.total_size: int = 0
        self.rejected_paths: List[Tuple[Path, dict]] = []

    def scan_garbage(self) -> Tuple[List[Path], int]:
        """
        Th·ª±c hi·ªán qu√©t to√†n b·ªô c√°c th∆∞ m·ª•c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong rules.py
        ƒë·ªÉ t√¨m file/th∆∞ m·ª•c r√°c.

        Returns:
            Tuple[List[Path], int]: Danh s√°ch path r√°c v√† t·ªïng dung l∆∞·ª£ng
        """
        scan_paths = get_scan_directories()

        for path in scan_paths:
            self._scan_directory(path)

        return self.trash_paths, self.total_size

    def _scan_directory(self, folder: Path) -> None:
        """
        Duy·ªát ƒë·ªá quy th∆∞ m·ª•c ƒë·ªÉ ki·ªÉm tra file v√† th∆∞ m·ª•c r√°c.
        L∆∞u k·∫øt qu·∫£ v√†o trash_paths v√† rejected_paths.

        Args:
            folder (Path): Th∆∞ m·ª•c g·ªëc c·∫ßn qu√©t
        """
        if not folder.exists():
            return

        try:
            for root, dirs, files in os.walk(folder):
                root_path = Path(root)

                # X·ª≠ l√Ω file r√°c
                for file in files:
                    file_path = root_path / file

                    # B·ªè qua n·∫øu kh√¥ng ph·∫£i file r√°c
                    if file_path.suffix.lower() not in (ext.lower() for ext in GARBAGE_EXTENSIONS):
                        continue

                    try:
                        stat = file_path.stat()
                        size = stat.st_size
                    except Exception:
                        continue

                    if not can_delete(file_path) or is_file_locked(file_path):
                        self.rejected_paths.append(
                            (file_path, check_permissions(file_path)))
                        continue

                    self.trash_paths.append(file_path)
                    self.total_size += size

                # X·ª≠ l√Ω th∆∞ m·ª•c r·ªóng
                for dir_name in dirs:
                    dir_path = root_path / dir_name

                    try:
                        if is_empty_directory(dir_path):
                            if can_delete(dir_path):
                                self.trash_paths.append(dir_path)
                            else:
                                self.rejected_paths.append(
                                    (dir_path, check_permissions(dir_path)))
                    except Exception:
                        continue
        except Exception:
            pass


def scan_and_log() -> None:
    """
    H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán to√†n b·ªô qu√° tr√¨nh:
    - Qu√©t r√°c h·ªá th·ªëng b·∫±ng TrashScanner
    - Gom nh√≥m k·∫øt qu·∫£ theo th∆∞ m·ª•c g·ªëc c·∫•p cao (d·ª±a v√†o rules.get_grouping_root)
    - Ghi log chi ti·∫øt v√†o file 'docs/scan_log.txt'
    - In t·ªïng k·∫øt s·ªë l∆∞·ª£ng, dung l∆∞·ª£ng r√°c v√† th·ªùi gian ho√†n th√†nh ra console
    """
    os.makedirs("docs", exist_ok=True)
    log_path = Path("docs/scan_log.txt")
    if log_path.exists():
        log_path.unlink()

    start_time = time()
    scanner = TrashScanner()
    paths, total_size = scanner.scan_garbage()
    duration = time() - start_time
    completed_at = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    grouped: dict[Path, List[Path]] = defaultdict(list)
    for path in paths:
        group_root = get_grouping_root(path)
        grouped[group_root].append(path)

    print(f"üßπ ƒê√£ t√¨m th·∫•y {len(paths)} file/th∆∞ m·ª•c r√°c.")
    print(f"üì¶ T·ªïng dung l∆∞·ª£ng: {total_size / 1024:.2f} KB")
    print(f"‚è±Ô∏è Th·ªùi gian qu√©t: {duration:.2f} gi√¢y")
    print(f"‚úÖ Ho√†n th√†nh l√∫c: {completed_at}")

    with open(log_path, "w", encoding="utf-8") as f:
        f.write(f"ƒê√£ t√¨m th·∫•y {len(paths)} file/th∆∞ m·ª•c r√°c.\n")
        f.write(f"T·ªïng dung l∆∞·ª£ng: {total_size / 1024:.2f} KB\n")
        f.write(f"Th·ªùi gian qu√©t: {duration:.2f} gi√¢y\n")
        f.write(f"Ho√†n th√†nh l√∫c: {completed_at}\n\n")
        f.write("üìÇ Danh s√°ch r√°c theo t·ª´ng th∆∞ m·ª•c:\n\n")

        for folder, items in sorted(grouped.items()):
            count = len(items)
            size = 0
            for p in items:
                try:
                    size += p.stat().st_size
                except Exception:
                    pass

            f.write(f"üìÅ {folder}\n")
            f.write(f"  - {count} file/th∆∞ m·ª•c r√°c ({size / 1024:.2f} KB)\n")

            for p in items:
                try:
                    sz = p.stat().st_size / 1024 if p.is_file() else 0
                    f.write(f"    ‚Ä¢ {p.name} ({sz:.2f} KB)\n")
                except Exception:
                    f.write(f"    ‚Ä¢ {p.name} (Kh√¥ng l·∫•y ƒë∆∞·ª£c dung l∆∞·ª£ng)\n")
            f.write("\n")

        if scanner.rejected_paths:
            f.write(
                "‚ö†Ô∏è C√°c file/th∆∞ m·ª•c KH√îNG ƒë∆∞·ª£c th√™m do thi·∫øu quy·ªÅn ho·∫∑c b·ªã kh√≥a:\n")
            for p, perms in scanner.rejected_paths:
                f.write(f"- {p} ‚Üí Quy·ªÅn: {perms}\n")

    print("üìÑ ƒê√£ l∆∞u danh s√°ch v√†o: docs/scan_log.txt")
    return grouped, total_size

