# scanner.py
"""
Module qu√©t h·ªá th·ªëng t√¨m r√°c cho CleanerApp.

Bao g·ªìm:
- TrashScanner: qu√©t file/th∆∞ m·ª•c r√°c
- Ph√¢n lo·∫°i r√°c theo 12 nh√≥m
- Ghi k·∫øt qu·∫£ ra file v√† l·ªãch s·ª≠ qu√©t
"""

import os
from pathlib import Path
from collections import defaultdict
from datetime import datetime
from time import time
from typing import List, Tuple
from core.rules import (
    get_scan_directories,
    is_empty_directory,
    is_garbage_file,
    can_delete,
    check_permissions,
    get_grouping_root,
    get_garbage_type,
    detect_installed_browsers,
    GARBAGE_TYPES
)
from utils import is_file_locked


class TrashScanner:
    """
    L·ªõp qu√©t h·ªá th·ªëng v√† ph√¢n lo·∫°i file/th∆∞ m·ª•c r√°c th√†nh 12 nh√≥m c·ª• th·ªÉ.

    C√°c k·∫øt qu·∫£ ƒë∆∞·ª£c gom v√†o:
    - self.trash_paths: Danh s√°ch path c√≥ th·ªÉ x√≥a
    - self.classified_paths: Dict ch·ª©a danh s√°ch path theo t·ª´ng lo·∫°i r√°c
    - self.rejected_paths: Danh s√°ch path kh√¥ng th·ªÉ x√≥a (b·ªã kh√≥a/thi·∫øu quy·ªÅn)
    """

    def __init__(self):
        """
        Kh·ªüi t·∫°o scanner v√† kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£.
        T·ª± ƒë·ªông ph√°t hi·ªán tr√¨nh duy·ªát ƒë·ªÉ ph√¢n t√≠ch lo·∫°i r√°c ch√≠nh x√°c h∆°n.
        """
        self.trash_paths: List[Path] = []
        self.total_size: int = 0
        self.rejected_paths: List[Tuple[Path, dict]] = []
        self.classified_paths: dict[str, List[Path]] = defaultdict(list)
        self.installed_browsers = detect_installed_browsers()
        self.scan_duration = 0

    def scan_garbage(self) -> Tuple[List[Path], int]:
        """
        Th·ª±c hi·ªán qu√©t t·∫•t c·∫£ th∆∞ m·ª•c ƒë√£ c·∫•u h√¨nh ƒë·ªÉ t√¨m file/th∆∞ m·ª•c r√°c.

        Returns:
            Tuple[List[Path], int]: Danh s√°ch path r√°c v√† t·ªïng dung l∆∞·ª£ng ƒë√£ qu√©t ƒë∆∞·ª£c.
        """
        start = time()
        scan_dirs = get_scan_directories()
        for folder in scan_dirs:
            self._scan_directory(folder)
        self.scan_duration = time() - start
        return self.trash_paths, self.total_size

    def _scan_directory(self, root: Path) -> None:
        """
        Qu√©t ƒë·ªá quy m·ªôt th∆∞ m·ª•c, ki·ªÉm tra v√† ph√¢n lo·∫°i r√°c b√™n trong.

        Args:
            root (Path): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c c·∫ßn qu√©t
        """
        if not root.exists():
            return

        try:
            for dirpath, dirnames, filenames in os.walk(root):
                current = Path(dirpath)

                # Qu√©t file r√°c
                for fname in filenames:
                    fpath = current / fname
                    if not is_garbage_file(fpath):
                        continue
                    if not can_delete(fpath) or is_file_locked(fpath):
                        self.rejected_paths.append(
                            (fpath, check_permissions(fpath)))
                        continue
                    self.trash_paths.append(fpath)
                    self.total_size += fpath.stat().st_size
                    gtype = get_garbage_type(fpath, self.installed_browsers)
                    self.classified_paths[gtype].append(fpath)

                # Qu√©t th∆∞ m·ª•c r·ªóng
                for dname in dirnames:
                    dpath = current / dname
                    if is_empty_directory(dpath):
                        if can_delete(dpath):
                            self.trash_paths.append(dpath)
                            gtype = get_garbage_type(
                                dpath, self.installed_browsers)
                            self.classified_paths[gtype].append(dpath)
                        else:
                            self.rejected_paths.append(
                                (dpath, check_permissions(dpath)))
        except Exception:
            pass

    def get_classified_summary(self) -> dict:
        """
        T·∫°o b·∫£ng t·ªïng h·ª£p s·ªë l∆∞·ª£ng v√† dung l∆∞·ª£ng theo t·ª´ng lo·∫°i r√°c.

        Returns:
            dict: {lo·∫°i_r√°c: (s·ªë l∆∞·ª£ng, t·ªïng_dung_l∆∞·ª£ng_byte)}
        """
        summary = {}
        for rtype, paths in self.classified_paths.items():
            total = 0
            for p in paths:
                try:
                    if p.is_file():
                        total += p.stat().st_size
                except:
                    pass
            summary[rtype] = (len(paths), total)
        return summary

    def export_scan_result(self) -> None:
        """
        L∆∞u k·∫øt qu·∫£ qu√©t r√°c v√†o th∆∞ m·ª•c docs/scanner.
        - X√≥a th∆∞ m·ª•c c≈© n·∫øu c√≥
        - T·∫°o file `scan_summary.txt` v·ªõi t·ªïng k·∫øt
        - T·∫°o th∆∞ m·ª•c `chi_tiet_rac/` ch·ª©a file chi ti·∫øt t·ª´ng lo·∫°i
        - L∆∞u l·ªãch s·ª≠ l·∫ßn qu√©t v√†o docs/history.txt
        """
        # X√≥a d·ªØ li·ªáu c≈©
        scanner_dir = Path("docs/scanner")
        if scanner_dir.exists():
            for file in scanner_dir.glob("**/*"):
                try:
                    file.unlink()
                except:
                    pass

        now = datetime.now()
        time_str = now.strftime("%Y-%m-%d %H:%M:%S")
        summary = self.get_classified_summary()
        os.makedirs("docs/scanner/chi_tiet_rac", exist_ok=True)

        main_log = scanner_dir / "scan_summary.txt"
        with open(main_log, "w", encoding="utf-8") as f:
            f.write(f"Th·ªùi gian ho√†n t·∫•t: {time_str}\n")
            f.write(f"T·ªïng s·ªë file r√°c: {len(self.trash_paths)}\n")
            f.write(f"T·ªïng dung l∆∞·ª£ng: {self.total_size / 1024:.2f} KB\n")
            f.write(f"Th·ªùi gian qu√©t: {self.scan_duration:.2f} gi√¢y\n\n")

            for rtype in GARBAGE_TYPES:
                count, size = summary.get(rtype, (0, 0))
                f.write(f"- {rtype}: {count} m·ª•c, {size / 1024:.2f} KB\n")

<<<<<<< HEAD
    print("üìÑ ƒê√£ l∆∞u danh s√°ch v√†o: docs/scan_log.txt")
    return grouped, total_size

=======
                filename = rtype.lower().replace(" ", "_") + ".txt"
                detail_path = scanner_dir / "chi_tiet_rac" / filename
                with open(detail_path, "w", encoding="utf-8") as df:
                    for path in self.classified_paths.get(rtype, []):
                        try:
                            size_kb = path.stat().st_size / 1024 if path.is_file() else 0
                            df.write(f"{path} ({size_kb:.2f} KB)\n")
                        except:
                            df.write(f"{path} (Kh√¥ng l·∫•y ƒë∆∞·ª£c dung l∆∞·ª£ng)\n")

        # L∆∞u l·ªãch s·ª≠
        history_path = Path("docs/history_scan.txt")
        with open(history_path, "a", encoding="utf-8") as hf:
            hf.write(
                f"{time_str} | {len(self.trash_paths)} file | {self.total_size / 1024:.2f} KB\n")


def run_scan():
    """
    H√†m d√πng trong main.py ƒë·ªÉ ch·∫°y qu√©t r√°c:
    - Qu√©t h·ªá th·ªëng
    - L∆∞u k·∫øt qu·∫£ v√†o th∆∞ m·ª•c docs/scanner/
    - In th√¥ng tin c∆° b·∫£n ra console
    """
    scanner = TrashScanner()
    scanner.scan_garbage()
    scanner.export_scan_result()

    print(f"üîç ƒê√£ qu√©t {len(scanner.trash_paths)} file/th∆∞ m·ª•c r√°c.")
    print(f"üì¶ T·ªïng dung l∆∞·ª£ng: {scanner.total_size / 1024:.2f} KB")
    print(f"üïí Th·ªùi gian qu√©t: {scanner.scan_duration:.2f} gi√¢y")
    print("üìÑ Chi ti·∫øt ƒë√£ l∆∞u trong: docs/scanner/")
>>>>>>> trongdepzai
