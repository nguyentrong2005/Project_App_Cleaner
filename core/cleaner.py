from pathlib import Path
from typing import List, Tuple
from utils.file_utils import delete_path


def clean_garbage(paths: List[Path]) -> Tuple[int, int]:
    """
    H√†m d·ªçn r√°c: nh·∫≠n danh s√°ch c√°c file/th∆∞ m·ª•c r√°c v√† x√≥a ch√∫ng.
    Tr·∫£ v·ªÅ:
        - S·ªë l∆∞·ª£ng m·ª•c ƒë√£ x√≥a th√†nh c√¥ng
        - T·ªïng dung l∆∞·ª£ng ƒë√£ gi·∫£i ph√≥ng (bytes)
    """
    deleted_count = 0
    freed_space = 0

    for path in paths:
        try:
            size = path.stat().st_size if path.is_file() else 0
            if delete_path(path):
                deleted_count += 1
                freed_space += size
        except Exception:
            continue  # B·ªè qua n·∫øu l·ªói khi truy c·∫≠p

    return deleted_count, freed_space


# ‚úÖ V√≠ d·ª• test nhanh
if __name__ == "__main__":
    from core.scanner import TrashScanner

    scanner = TrashScanner()
    r√°c, t·ªïng_dung_l∆∞·ª£ng = scanner.scan_garbage()

    print(f"\nüîç Qu√©t xong: {len(r√°c)} m·ª•c, t·ªïng {t·ªïng_dung_l∆∞·ª£ng / 1024:.2f} KB")
    ƒë√£_x√≥a, ƒë√£_gi·∫£i_ph√≥ng = clean_garbage(r√°c)
    print(f"\nüßπ ƒê√£ x√≥a: {ƒë√£_x√≥a} m·ª•c, gi·∫£i ph√≥ng {ƒë√£_gi·∫£i_ph√≥ng / 1024:.2f} KB")
