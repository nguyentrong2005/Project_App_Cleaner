# cleaner.py
"""
Module x√≥a r√°c h·ªá th·ªëng cho CleanerApp.

- Nh·∫≠n danh s√°ch file/th∆∞ m·ª•c c·∫ßn x√≥a t·ª´ qu√° tr√¨nh qu√©t
- Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† tr·∫°ng th√°i kh√≥a
- Ti·∫øn h√†nh x√≥a v√† ghi l·∫°i k·∫øt qu·∫£
- Ghi l·ªãch s·ª≠ d·ªçn d·∫πp v√†o file
"""

from pathlib import Path
from typing import List, Tuple
import os
from core.rules import can_delete, check_permissions
from utils import is_file_locked


class TrashCleaner:
    """
    L·ªõp th·ª±c hi·ªán x√≥a c√°c file/th∆∞ m·ª•c r√°c ƒë√£ ƒë∆∞·ª£c qu√©t.

    Attributes:
        paths (List[Path]): Danh s√°ch path c·∫ßn x√≥a
        deleted (List[Path]): Danh s√°ch path ƒë√£ x√≥a th√†nh c√¥ng
        failed (List[Tuple[Path, str]]): Danh s√°ch path b·ªã l·ªói k√®m l√Ω do
    """

    def __init__(self, paths: List[Path]):
        """
        Kh·ªüi t·∫°o TrashCleaner v·ªõi danh s√°ch path c·∫ßn x√≥a.

        Args:
            paths (List[Path]): Danh s√°ch file/th∆∞ m·ª•c c·∫ßn x√≥a
        """
        self.paths = paths
        self.deleted: List[Path] = []
        self.failed: List[Tuple[Path, str]] = []

    def clean(self) -> None:
        """
        Th·ª±c hi·ªán x√≥a t·∫•t c·∫£ path trong danh s√°ch:

        - Ki·ªÉm tra quy·ªÅn v√† tr·∫°ng th√°i kh√≥a
        - Ghi l·∫°i k·∫øt qu·∫£ v√†o danh s√°ch `deleted` v√† `failed`
        """
        for path in self.paths:
            try:
                if not path.exists():
                    continue
                if not can_delete(path):
                    self.failed.append((path, "Kh√¥ng ƒë·ªß quy·ªÅn"))
                    continue
                if is_file_locked(path):
                    self.failed.append((path, "T·∫≠p tin ƒëang b·ªã kh√≥a"))
                    continue

                if path.is_file():
                    path.unlink()
                elif path.is_dir():
                    os.rmdir(path)
                self.deleted.append(path)

            except Exception as e:
                self.failed.append((path, str(e)))

    def get_result(self) -> Tuple[List[Path], List[Tuple[Path, str]]]:
        """
        Tr·∫£ v·ªÅ k·∫øt qu·∫£ sau khi x√≥a.

        Returns:
            Tuple[List[Path], List[Tuple[Path, str]]]:
                - Danh s√°ch ƒë√£ x√≥a
                - Danh s√°ch th·∫•t b·∫°i (k√®m l√Ω do)
        """
        return self.deleted, self.failed


def run_clean():
    """
    H√†m d√πng trong main.py ƒë·ªÉ th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh d·ªçn r√°c:
    - G·ªçi TrashScanner ƒë·ªÉ qu√©t r√°c
    - D·ªçn b·∫±ng TrashCleaner
    - Ghi k·∫øt qu·∫£ v√† l·ªãch s·ª≠ d·ªçn v√†o file
    - In k·∫øt qu·∫£ ra console
    """
    from core.scanner import TrashScanner
    from time import time
    from datetime import datetime

    # Qu√©t r√°c
    scanner = TrashScanner()
    scanner.scan_garbage()

    # D·ªçn r√°c
    cleaner = TrashCleaner(scanner.trash_paths)
    print(f"üóë ƒêang ti·∫øn h√†nh d·ªçn {len(scanner.trash_paths)} m·ª•c...")

    start = time()
    cleaner.clean()
    duration = time() - start

    deleted, failed = cleaner.get_result()
    print(f"‚úÖ ƒê√£ x√≥a {len(deleted)} m·ª•c trong {duration:.2f} gi√¢y.")
    if failed:
        print(f"‚ö†Ô∏è C√≥ {len(failed)} m·ª•c kh√¥ng x√≥a ƒë∆∞·ª£c:")
        for p, reason in failed:
            print(f" - {p} ‚Üí {reason}")

    # Ghi l·ªãch s·ª≠
    history_path = Path("docs/history_clean.txt")
    history_path.parent.mkdir(parents=True, exist_ok=True)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(history_path, "a", encoding="utf-8") as f:
        f.write(
            f"{now} | ƒê√É D·ªåN: {len(deleted)} m·ª•c | TH·∫§T B·∫†I: {len(failed)} m·ª•c\n")
