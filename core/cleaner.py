# cleaner.py
"""
Module x√≥a r√°c h·ªá th·ªëng cho CleanerApp.

Ch·ª©c nƒÉng ch√≠nh:
- Nh·∫≠n danh s√°ch file/th∆∞ m·ª•c c·∫ßn x√≥a
- Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† tr·∫°ng th√°i kh√≥a
- Th·ª±c hi·ªán x√≥a v√† ghi l·∫°i k·∫øt qu·∫£
- Ghi l·ªãch s·ª≠ d·ªçn d·∫πp v√† chi ti·∫øt v√†o file log
"""

import os
from pathlib import Path
from typing import List, Tuple
from datetime import datetime

from core.rules import can_delete
from utils import is_file_locked


class TrashCleaner:
    """
    L·ªõp th·ª±c hi·ªán vi·ªác x√≥a c√°c file/th∆∞ m·ª•c r√°c.

    Attributes:
        paths (List[Path]): Danh s√°ch c√°c path c·∫ßn x√≥a
        deleted (List[Path]): Danh s√°ch ƒë√£ x√≥a th√†nh c√¥ng
        failed (List[Tuple[Path, str]]): Danh s√°ch l·ªói v√† l√Ω do th·∫•t b·∫°i
    """

    def __init__(self, paths: List[Path]):
        """
        Kh·ªüi t·∫°o TrashCleaner v·ªõi danh s√°ch c·∫ßn x√≥a.

        Args:
            paths (List[Path]): Danh s√°ch file/th∆∞ m·ª•c r√°c
        """
        self.paths = paths
        self.deleted: List[Path] = []
        self.failed: List[Tuple[Path, str]] = []

    def clean(self) -> None:
        """
        X√≥a t·ª´ng path trong danh s√°ch:
        - Ki·ªÉm tra quy·ªÅn x√≥a v√† tr·∫°ng th√°i kh√≥a
        - Ghi l·∫°i k·∫øt qu·∫£ v√†o `deleted` ho·∫∑c `failed`
        """
        for path in self.paths:
            try:
                if not path.exists():
                    continue
                if not can_delete(path):
                    self.failed.append((path, "Kh√¥ng ƒë·ªß quy·ªÅn"))
                    continue
                if is_file_locked(path):
                    self.failed.append((path, "T·∫≠p tin ƒëang b·ªã kh√≥a"))
                    continue

                if path.is_file():
                    path.unlink()
                elif path.is_dir():
                    os.rmdir(path)

                self.deleted.append(path)

            except Exception as e:
                self.failed.append((path, str(e)))

    def get_result(self) -> Tuple[List[Path], List[Tuple[Path, str]]]:
        """
        Tr·∫£ v·ªÅ k·∫øt qu·∫£ sau khi th·ª±c hi·ªán d·ªçn d·∫πp.

        Returns:
            Tuple:
                - Danh s√°ch ƒë√£ x√≥a th√†nh c√¥ng
                - Danh s√°ch l·ªói (k√®m l√Ω do)
        """
        return self.deleted, self.failed


def save_clean_summary_log(type_summary: dict[str, List[Tuple[Path, int]]]) -> None:
    """
    Ghi log t·ªïng h·ª£p k·∫øt qu·∫£ d·ªçn d·∫πp v√†o history_cleaner.txt

    Args:
        type_summary (dict): D·ªØ li·ªáu d·∫°ng {lo·∫°i_r√°c: [(path, size_bytes)]}
    """
    os.makedirs("docs/cleaner", exist_ok=True)
    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    total_count = sum(len(paths) for paths in type_summary.values())
    total_size = sum(size for paths in type_summary.values()
                     for _, size in paths)
    total_size_mb = round(total_size / (1024 * 1024), 1)

    with open("docs/cleaner/history_cleaner.txt", "a", encoding="utf-8") as f:
        f.write(
            f"üßπ D·ªçn r√°c l√∫c {now} ‚Äî T·ªïng: {total_count} m·ª•c, {total_size_mb} MB\n")
        for trash_type, path_tuples in type_summary.items():
            count = len(path_tuples)
            size = sum(sz for _, sz in path_tuples)
            size_mb = round(size / (1024 * 1024), 1)
            f.write(f"- {trash_type}: {count} m·ª•c, {size_mb} MB\n")


def save_clean_per_type_detail(type_summary: dict[str, List[Path]]) -> None:
    """
    Ghi chi ti·∫øt c√°c path ƒë√£ x√≥a ra 1 file log duy nh·∫•t trong docs/cleaner/chi_tiet_xoa/

    Args:
        type_summary (dict): D·ªØ li·ªáu d·∫°ng {lo·∫°i_r√°c: [path1, path2, ...]}
    """
    if not type_summary:
        return

    folder = Path("docs/cleaner/chi_tiet_xoa")
    folder.mkdir(parents=True, exist_ok=True)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_path = folder / f"{timestamp}.txt"

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(f"üßπ D·ªçn r√°c l√∫c {timestamp.replace('_', ' ')}\n\n")
        for trash_type, paths in type_summary.items():
            if not paths:
                continue
            f.write(f"üìÇ {trash_type} ({len(paths)} m·ª•c):\n")
            for p in paths:
                f.write(f"- {str(p)}\n")
            f.write("\n")
